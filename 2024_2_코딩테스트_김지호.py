# -*- coding: utf-8 -*-
"""2024_2_코딩테스트_김지호.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tQdwbH7_GV47JiWCcYKsh7LIkABePKvd

** 코딩테스트 문제는 모두 풀지 않아도 지원 가능합니다. 지원자분들의 전체적인 코딩 실력을 파악하여 커리큘럼에 반영하고자 진행되는 테스트이기 때문에 부담 없이 풀어주시면 됩니다!

### 1. 자연수 N을 입력하면 N 이하의 모든 소수(Prime Number)의 합을 반환하는 함수를 작성하시오. 이후 이 함수를 이용하여 100, 1000, 10000 각각에 대한 모든 소수의 합을 구하여 보고하시오.
"""

def sum_of_primes(N):
    sieve = [True] * (N + 1)
    sieve[0] = sieve[1] = False

    for start in range(2, int(N**0.5) + 1):
        if sieve[start]:
            for multiple in range(start*start, N + 1, start):
                sieve[multiple] = False

    prime_sum = sum(num for num, is_prime in enumerate(sieve) if is_prime)
    return prime_sum

result_100 = sum_of_primes(100)
result_1000 = sum_of_primes(1000)
result_10000 = sum_of_primes(10000)

print("100 이하의 소수의 합:", result_100)
print("1000 이하의 소수의 합:", result_1000)
print("10000 이하의 소수의 합:", result_10000)

"""### 2. 김파인 씨는 비밀번호 설정 프로그램을 만드는 중이다. 아래 조건에 부합하는 비밀번호를 입력받으면 해당 비밀번호를 반환하고, 그렇지 않으면 ‘재설정하시오’ 문구를 반환하는 함수를 작성하시오.

[조건]
1) 4자리 이상, 10자리 이하일 것
2) 대소문자 알파벳, 숫자만 사용 가능
3) 대문자와 소문자 알파벳을 각각 한 개 이상씩 포함할 것
4) 같은 문자 혹은 숫자는 2번까지만 사용 가능

"""

import re
from collections import Counter

def is_valid_password(password):
    if not (4 <= len(password) <= 10):
        return "재설정하시오"

    if not re.match("^[A-Za-z0-9]+$", password):
        return "재설정하시오"

    if not re.search("[A-Z]", password) or not re.search("[a-z]", password):
        return "재설정하시오"

    char_count = Counter(password)
    if any(count > 2 for count in char_count.values()):
        return "재설정하시오"

    return password

password = input("비밀번호를 입력하시오: ")
result = is_valid_password(password)
print(result)

"""### 3. OOP(객체지향 프로그래밍)
당신은 현재 고객의 자산을 관리중에 있습니다. 고객 관리를 편리하게 하기 위해 자산 관리와 관련된 Class를 만들고자 합니다. 다음의 조건과 코드에 맞춰 코드로 구현하여 보고하세요.
- 객체 지향 프로그래밍을 할 것
- Class 변수에는 다음과 같은 변수가 들어갈 것
    - 고객의 이름
    - 신탁 자산의 총액
    - 시장의 무위험 이자율
    - 적용 금리
- Class Instance 변수를 보호(protected) 모드로 설정할 것
    - 단, 지정된 변수는 property를 이용해 외부에서 접근이 가능하도록 할 것
- method로는 다음을 고려할 것
    - 현재가치를 미래가치로 변환
    - 미래가치를 현재가치로 변환
    - 초과 수익률 계산
"""

class makeAsset(object) :
    def __init__(self, name, asset, rf, rate) :
        self._name = name
        self._asset = asset
        self._rf = rf
        self._rate = rate

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def asset(self):
        return self._asset

    @asset.setter
    def asset(self, value):
        self._asset = value

    @property
    def rf(self):
        return self._rf

    @rf.setter
    def rf(self, value):
        self._rf = value

    @property
    def rate(self):
        return self._rate

    @rate.setter
    def rate(self, value):
        self._rate = value

    def present2future(self, years):
        future_value = self._asset * (1 + self._rate) ** years
        return future_value

    def future2present(self, future_value, years):
        present_value = future_value / ((1 + self._rate) ** years)
        return present_value

    def excessReturn(self):
        excess_return = self._rate - self._rf
        return excess_return

if __name__ == '__main__' :
    pass # 프로그램 실행 부분

if __name__ == '__main__':
    AssetManagement = makeAsset("김지호", 1000000, 0.02, 0.04)

    future_value = AssetManagement.present2future(10)
    print(f"10년 후 미래가치: {future_value}")

    # 미래 가치를 현재 가치로 환산 (예: 10년 후의 미래가치 1628894.6267774415을 현재 가치로 환산)
    present_value = AssetManagement.future2present(future_value, 10)
    print(f"현재가치로 환산: {present_value}")

    # 초과 수익률 계산
    excess_return = AssetManagement.excessReturn()
    print(f"초과 수익률: {excess_return}")

"""### 4. Financial Data Analysis

금융 리스크 매니지먼트를 담당하는 당신은 위험을 측정하기 위해 역사적 데이터를 수집하여 Risk를 추정하고자 합니다. pandas-datareader Library를 이용하여 Naver finance의 데이터를 불러온 뒤, KOSPI index, KOSDAQ index의 2020년 1월 1일부터 2023년 6월 30일까지의 데이터를 수집해 각 index별 Risk 추정치를 보고하고 두 index간 correlation을 계산하세요
"""

import pandas_datareader as web # pip install pandas-datareader

"""### 5. Konlpy 라이브러리를 활용하여 주어진 sample text에서 빈도가 가장 높은 10개의 명사를 리스트 형태로 반환하시오. (풀이 코드도 함께 작성할 것)"""